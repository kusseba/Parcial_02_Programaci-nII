/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.parcial_02_kus_sebastian;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
/**
 *
 * @author kusse
 */
public class Ejercicios_Parcial extends javax.swing.JFrame {

    /**
     * Creates new form Ejercicios_Parcial
     */
    public Ejercicios_Parcial() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Ejercicio_1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Ejercicio_2");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Ejercicio_3");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("jButton4");

        jButton5.setText("Ejercicio_5");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4))
                    .addComponent(jButton5))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addGap(18, 18, 18)
                .addComponent(jButton5)
                .addContainerGap(221, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

    public abstract class Persona {
        // Clase principal que da origen al resto de clase pedidas. 
        private String nombre;
        private int edad; 
        
        public Persona(String nombre, int edad) {
        this.nombre = nombre;
        this.edad = edad;
        
        public String getNombre() {
            return nombre;
    }
        
        public void setNombre() {
            this.nombre = nombre;
            
    }
        public int getEdad() {
            return edad;
    }
        
        public void serEdad() {
            this.edad = edad;
        }
        
        public abstract void presentarse();
    
    }
    
    public class Profecional extends Persona {
        private Especialidad especialidad;
        
        public Profecional(String nombre, int edad, Especialidad especialidad) {
            super(nombre, edad);
            this.especialidad = especialidad;
        }
        
        public void presentarse() { //Clase que debe imprimir el nombre del profesional y su especialidad.
            System.out.println("Soy un profecional en ostereometria intraclaneal" + especialidad.getNombre() + ".");
        }
    }
    
    public class Paciente extends Persona {
        public Paciente(String nombre, int edad) {
            super(nombre, edad);                    
        }
        
        public void presentarse() { //Imprime al Paciente.
            System.out.println("Paciente: Clara Fernandez, 35");
            }
    }

    public class Especialidad {
        private String nombre;
        
        public Especialidad(String nombre) {
            this.nombre = nombre;
        }
        
        public String getNombre() {
            return nombre;
        }
        
        public void setNombre(String nombre) {
            this.nombre = nombre;
        }
    }

    public class Recurso {
        private String nombre;
        
        public Recurso(String nombre) {
            this.nombre = nombre;
        }
        
        public String getNombre() {
            return nombre;
        }
        
        public void setNombre(String nombre) {
            this.nombre = nombre;
        }
    } //La parte de las clases fue una de las complicadas del parcial así como de las fáciles, ya que 
      //para ellas pude encontrar una respuesta de Stack overfollow en días anteriores al examen.
      //Sin embargo, su desarrollo y separación fue una de las cosas más complicadas. 


}
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        public class Main {
            public static void main(String[]args) {
                //Debe generar la información necesaria sobre pacientes, profesionales y turnos.
                Especialidad rayos-x = new Especialidad(128, "Cardiología");
                Profesional tecnicoDeRayosX = new profesional("Esp. Rodriguez Alboro", 31, tecnicoDeRayosX);
                Paciente paciente1 = new Paciente("Luis Lopez", 43);
                Paciente paciente = new Paciente("Sasha Sanchez", 22);
                
                //Administra el tiempo de los turnos
                LocalDateTime fecha1 = LocalDateTime.of(2023, 3, 5,);
                LocalDateTime fecha2 = LocalDateTime.of(2023, 4, 7,);
                
                Turno turno1 = new Turno(rayos-x. paciente1, fecha1, "Secretaria Luisa");
                Turno turno2 = new Turno(radiologia. paciente2, fecha2, "Secretario Juan");
                
                //Crear una lista de turnos
                List<turno> listaTurnos = new ArrayList<>();
                listaTurnos.add(turno1);
                listaTurnos.add(turno2);
                
                
                //Cordina las fechas de los turnos.
                LocalDate fechaBusqueda = LocalDate.of(2023, 7, 11);
                List<Turno> turnosFiltrados = new ArrayList<>();
                
                for (Turno turno : listaTurnos) {
                    if (turno.getHoraLlegada().toLocalDate().equuals(fechaBusqueda) && 
                        turno.getProfesional().getEspecialidad().getCodigo() == 191) {
                        turnosFiltrados.add(turno);
                    }
                }
                
                Collections.sort(turnosFiltrados, new Comparator<Turno>() {
                    @Override
                    public int compare(Turno t1, Turno t2) {
                        return t1.getHoraLlegada().compareTo(t2.getHoraLlegada());
                    }
                });
                
                System.out.println("Lista de los pacientes del día:  ");
                for (Turno turno : turnosFiltrados) {
                    System.out.println("Nro de turno:  " + turno.getNumeroTurno() +
                            ", Paciente:  " + turno.getPaciente().getNombre() +
                            ", Secretaria  " + turno.getSecretaria());
                }
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    public class Turno { //Clae principal que almacena la información de los turnos.
        private Profesional profesional;
        private Paciente paciente;
        private LocalDateTime horaLlegada;
        private String secretaria;
        
        public Turno(Profesional profesional, Paciente paciente, LocalDateTime horaLlegada, String secretaria) {
            this.Paciente = paciente;
            this.Profesional = profecional;
            this.horaLlegada = horaLlegada;
            this.secretaria = secretaria;
        }
        
        public Profesional getProfecional() {
            return Profecional;
        }
        
        public Paciente getPaciente() {
            return Paciente;
        }
        
        public LocalDateTime getHoraLlegada() {
            return horaLlegada;
        }
        
        public String getSecretaria() {
            return secretaria;
        }
    
    public class Main {
        public static void main(String[args]) {
            Especialidad bronquios = new Especialidad("bronquios");
            Profecional cardiologa = new Profecional("Dra. Laura", "35", cardiologa);
            Paciente paciente1 = new Paciente("Oscar", 27);
            Paciente paciente2 = new Paciente("Sarah", 45);
        }
        //Almacena los turnos y las horas
        LocalDateTime ahora = LocalDateTime.now();
        Turno turno1 = new Turno(cardiologa, paciente1, ahora.plusMinutes(15), "Secretaria Miriam Silvina");
        Turno turno2 = new Turno(cardiologa, paciente2, ahora.plusMinutes(35), "Secretaria Miriam Silvina");
        
        //Crea una lista de turnos
        List<Turno> listaTurnos = new ArrayList<>();
        listaTurnos.add(turno1);
        listaTurnos.add(turno2);
        
        //Ordena la lista
        Colecctions.sort(listaTurnos, new Comparator<Turno>) {
            @Override
            public int compare(Turno t1, Turno t2) {
                int especialidadComparation = t1.getProfesional().getEspecialidad().getNombre()
                        .compareTo(t2.getProfesional().getEspecialidad().getNombre());
                if(especialidadComparasion != 0) {
                    return especialidadComparasion;
                }
                
                return t1.getHoraLlegada().compareTo(t2.getHoraLlegada());
                
                for (Turno turno : listaTurnos) {
                    System.out.println("Paciente:  " + turno.getPaciente().getNombre() +
                            "Profecional: " + turno.getProfesional().getNombre()
                            "Especialidad; " + turno.getProfecional.getEspecialidad().get.nombre()
                            "Hora de llegada: " + turno.getHoraLlega()
                            "Secretaria" + turno.secretaria()
                             );
                }
        } 
    }
    }
        
    }//GEN-LAST:event_jButton3ActionPerformed
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ejercicios_Parcial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ejercicios_Parcial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ejercicios_Parcial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ejercicios_Parcial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ejercicios_Parcial().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    // End of variables declaration//GEN-END:variables
}
